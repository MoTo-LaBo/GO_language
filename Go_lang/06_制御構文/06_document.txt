Go言語基礎 : 制御構文


	--------------- 簡易文付き if ---------------

	- 注意点 :
	- if文では内部の変数が優先される


	--------------- switch ( 式スイッチ ) ---------------

	- 式を評価して処理を分岐する : data型は合わせる事


	--------------- switch ( 型スイッチ ) ---------------

	- 型参照
		- 動的に型を参照する。全ての型と互換性がある interface型を使用すると様々な引数をとる関数を作成する事ができる
		- func の引数で渡される値の型は interface型なので失われる。計算はできない


	--------------- defer ( デファー ) ---------------

	- 関数の終了時に実行される処理を登録することができる
	- 複数の処理を登録したい場合（無名関数を使用する）
		-main関数が終了後に実行される : 1, 2, 3 の順番で出力される


	--------------- defer で最も使用される処理 ---------------

	- defer文を使用した resource の解放処理
	- os.Createでfileを作成できる
		- 1. os.Create で fileを開く
		- 2. error があれば表示される(errorハンドリング)
		- 3. defer で file Close する file などの Resource 解放処理の漏れなどを防ぐ


	--------------- panic recover ---------------

	- go の例外処理 : runtime を強制的に終了させる機能を持つ為
	「 panic より推奨されている error  handling 」
		- panic は program を強制終了する為、あまり使用はしない方が良い


	--------------- recoverの役割 ---------------

	recover は panic で発生した error から復帰する機能
	※　実質 defer文の中でしか機能しないので deferと一緒に使用するのが原則


	--------------- 並列処理 go goroutin---------------

	- goroutin ( ゴルーチン )
		- go を文に使用する事で簡単に平行処理ができる
		- スレットより小さい単位
		- main()関数, sub()関数で同時に走らせるå

	--------------- init ( package 初期化 )---------------

	- main( ) 関数より先に読み込まられて処理される
	- main より先に確実に初期化処理をしたい場合に使用する
		- sub package の読み込みなどetc...
	- 複数のinit( ) を使用する事ができる
		- 記述順に処理されて行く

