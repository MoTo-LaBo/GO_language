Go 言語基礎 : 参照型
  
	--------------- defer 最も使用される処理 ---------------

	defer文を使用した resource の解放処理 : file作成 -> 書き込み・追記 -> Close


	--------------- slice ---------------

	・配列と同様に中の各括弧に記述できる
		- 配列との違いは [ ] の中に要素を記述しない

	・ 参照型は最初に定義した値と後から代入した値は
	　　同じメモリを共有するという特徴がある

	make([]型, 数)
		- 指定したdata型を指定した数で出力


	--------------- append, make, len, cap ---------------

	append(追加slice, 追加data)
			- slice の拡張(dataが追加される)

	・sliceは要素数が可変調になっている
		- 拡張性が高い(要素数制限がなくてサイズ数も変更できる)

	len(要素)
		- 要素数を調べる

	cap(要素)
		- capacity : 要素数を調べる
		- program の容量を気にする場合に使用
		- パフォーマンスを気にする開発場合に細かく指定する

	【capacity（要領）について】
		- 要領以上の要素が追加されるとメモリの消費が倍になってしまう
		- メモリーを気にするような開発の場合は、容量にも気をつける
		- 過剰にメモリを確保してしまうと実行速度が落ちたりする
		- 良質なパフォーマンスを実現するには、要領の管理も気にする


	--------------- 可変長引数 ---------------

	引数に数を指定しなで渡すことができる



	
